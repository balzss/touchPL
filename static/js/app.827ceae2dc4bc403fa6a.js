webpackJsonp([1],{7:function(e,p,s){"use strict";function o(e){return e<10&&(e="0"+e),e}function t(){var e=new Date,p=e.getHours(),s=e.getMinutes();s=o(s),document.getElementById("time").innerHTML=p+":"+s,n=setTimeout(function(){t()},2e4)}Object.defineProperty(p,"__esModule",{value:!0});var r=s(6);const i=s(2),a=s(3);s(4),s(5),r.a.config.productionTip=!1,r.a.component("BlockStatement",{props:["props"],template:'<div><component :is="node.type" v-for="node in props.body" :props="node"/></div>'}),r.a.component("VariableDeclaration",{props:["props"],template:'<div><div class="header card teal" v-for="d in props.declarations"><span class="scnd">var </span>{{ d.id.name }} <component :is="d.init.type" :props="d.init" v-if="d.init"/></div></div>'}),r.a.component("EmptyStatement",{template:"<div></div>"}),r.a.component("Identifier",{props:["props"],template:'<div class="header card atom">{{ props.name }}</div>'}),r.a.component("Literal",{props:["props"],template:'<div class="header card atom">{{ props.raw }}</div>'}),r.a.component("ThisExpression",{template:'<div class="header card grey">this</div>'}),r.a.component("BreakStatement",{template:'<div class="header card grey">break</div>'}),r.a.component("ContinueStatement",{template:'<div class="header card grey">continue</div>'}),r.a.component("ExpressionStatement",{props:["props"],template:'<component v-else :is="props.expression.type" :props="props.expression"/>'}),r.a.component("UpdateExpression",{props:["props"],template:'<div><component :is="props.argument.type" :props="props.argument"/><div class="header card chain red">{{ props.operator }}</div></div>'}),r.a.component("UnaryExpression",{props:["props"],template:'<div><div class="header card chain-bottom red">{{ props.operator }}</div><component :is="props.argument.type" :props="props.argument"/></div>'}),r.a.component("MemberExpression",{props:["props"],template:'<div><component :is="props.object.type" :props="props.object"/><component :is="props.property.type" :props="props.property" class="chain red" :class="{computed: props.computed}"/></div>'}),r.a.component("CallExpression",{props:["props"],template:'<div><component v-if="this.isME()" :is="props.callee.object.type" :props="props.callee.object"/><div class="header card blue" :class="{ chain: isME()}" ><div >{{ this.getName() }}</div><component :is="a.type" v-for="a in props.arguments" :props="a"/></div></div>',methods:{isME:function(){return"MemberExpression"==this.props.callee.type},isFE:function(){return"FunctionExpression"==this.props.callee.type},getName:function(){return"MemberExpression"==this.props.callee.type?this.props.callee.property.name:this.props.callee.name}}}),r.a.component("FunctionExpression",{props:["props"],template:'<div class="card" ><div class="header blue"> <span class="scnd">function</span> <div v-for="p in props.params" class=" grey header card"> {{ p.name }} </div></div><div class="header amber"><BlockStatement :props="props.body"/></div></div>'}),r.a.component("NewExpression",{props:["props"],template:'<div><component is="props.callee.type" v-if="this.isME()" :props="props.callee.object"/><div class="header card amber" :class="{chain: this.isME()}" ><span class="scnd">new </span> {{ this.getName() }}<component :is="a.type" v-for="a in props.arguments" :props="a"/></div></div>',methods:{isME:function(){return"MemberExpression"==this.props.callee.type},getName:function(){return"MemberExpression"==this.props.callee.type?this.props.callee.property.name:this.props.callee.name}}}),r.a.component("BinaryExpression",{props:["props"],template:'<div class="header card purple"><component :is="props.left.type" :props="props.left"/><div class="infix"> <div class="line"></div> <div class="circle">{{ props.operator }}</div> <div class="line"></div></div><component :is="props.right.type" :props="props.right"/></div>'}),r.a.component("LogicalExpression",{props:["props"],template:'<div class="header card purple"><component :is="props.left.type" :props="props.left"/><div class="infix"> <div class="line"></div> <div class="circle">{{ props.operator }}</div> <div class="line"></div></div><component :is="props.right.type" :props="props.right"/></div>'}),r.a.component("ConditionalExpression",{props:["props"],template:'<div class="header card brown"><component :is="props.test.type" :props="props.test"/><div class="infix"> <div class="line"></div> <div class="circle">?</div> <div class="line"></div></div><component :is="props.consequent.type" :props="props.consequent"/><div class="infix"> <div class="line"></div> <div class="circle">:</div> <div class="line"></div></div><component :is="props.alternate.type" :props="props.alternate"/></div>'}),r.a.component("AssignmentExpression",{props:["props"],template:'<div class="card"><component :is="props.left.type" :props="props.left"/><div class="assignment header grey"> {{ props.operator }}<component :is="props.right.type" :props="props.right"/></div></div>'}),r.a.component("ForStatement",{props:["props"],template:'<div class="card"><div class="header brown">for<component :is="props.init.type" :props="props.init"/> <div class="line"></div><component :is="props.test.type" :props="props.test"/> <div class="line"></div><component :is="props.update.type" :props="props.update"/></div><div class="header orange"><BlockStatement :props="props.body"/></div></div>'}),r.a.component("ReturnStatement",{props:["props"],template:'<div class=" header card grey" > return <component :is="props.argument.type" :props="props.argument"/></div>'}),r.a.component("ForInStatement",{props:["props"],template:'<div class="card"><div class="header brown"> for<component :is="props.left.type" :props="props.left"/><div class="infix"> <div class="line"></div> <div class="circle small">in</div> <div class="line"></div></div><component :is="props.right.type" :props="props.right"/></div><div class="header orange"><BlockStatement :props="props.body"/></div></div>'}),r.a.component("WhileStatement",{props:["props"],template:'<div class="card"><div class="header brown"> while<component :is="props.test.type" :props="props.test"/></div><div class="header orange"><BlockStatement :props="props.body"/></div></div>'}),r.a.component("IfStatement",{props:["props","hasElse"],template:'<div class="card"><div class="header green"> <span v-if="hasElse">else </span> if<component :is="props.test.type" :props="props.test"/></div><div class="header cyan"><component :is="props.consequent.type" :props="props.consequent"/></div><div v-if="props.alternate"><IfStatement class="elseif" v-if="props.alternate.type == \'IfStatement\'" :props="props.alternate" :hasElse="true"/><div v-else class="header green"> else<component :is="props.alternate.type" :props="props.alternate"/></div></div></div>'}),r.a.component("SwitchStatement",{props:["props"],template:'<div class="card"><div class="header">switch<component :is="props.discriminant.type" :props="props.discriminant"/></div><div v-for="c in props.cases" class="dict-item"><div class="header grey">case<component :is="c.test.type" :props="c.test"/></div><BlockStatement class="header" :props="{body: c.consequent}"/></div></div>'}),r.a.component("ArrayExpression",{props:["props"],template:'<div class="card list"><div class="header list-header">Array</div><div v-for="e in props.elements" class="list-item"><component :is="e.type" :props="e"/></div></div>'}),r.a.component("ObjectExpression",{props:["props"],template:'<div class="card list"><div class="header">Object</div><div v-for="p in props.properties" class=" dict-item"><div class="header grey"><span v-if="p.key.type == \'Identifier\'">{{ p.key.name }}</span><span v-else>{{ p.key.raw }}</span></div><div class="header"><component :is="p.value.type" :props="p.value"/></div></div></div>'}),r.a.component("FunctionDeclaration",{props:["props"],template:'<div class="card"><div class="header red"><span class="scnd">function </span>{{ props.id.name }}<div v-for="p in props.params" class=" grey header card"> {{ p.name }} </div></div><BlockStatement class="header amber" :props="props.body"/></div>'});var n,d=i.parse("var x = 1"),c=new r.a({el:"#main",data:{astBody:d},template:'<div id="app"><BlockStatement :props="astBody"></BlockStatement></div>',methods:{compile:function(){var e=document.getElementById("code-editor").value,p=i.parse(e);this.astBody=p.body}}});t();var l=a.edit("editor");l.$blockScrolling=1/0,l.on("input",function(){try{c.$data.astBody=i.parse(l.getValue())}catch(e){console.log("error")}}),l.setTheme("ace/theme/chrome"),l.getSession().setMode("ace/mode/javascript"),l.getSession().setUseWrapMode(!0),l.setValue('for (var i = 1; i <= 20; i++) {\n    if (i % 15 == 0)\n        console.log("FizzBuzz");\n    else if (i % 3 == 0)\n        console.log("Fizz");\n    else if (i % 5 == 0)\n        console.log("Buzz");\n    else\n        console.log(i);}',1),l.getSession().setUseWorker(!1),l.setHighlightActiveLine(!1)}},[7]);
//# sourceMappingURL=app.827ceae2dc4bc403fa6a.js.map